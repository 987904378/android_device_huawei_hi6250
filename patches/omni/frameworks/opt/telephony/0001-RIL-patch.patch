From 32f8eaa33b465d3129ab365130a39cc09a43f646 Mon Sep 17 00:00:00 2001
From: Meticulus <theonejohnnyd@gmail.com>
Date: Sat, 25 Mar 2017 08:58:48 -0500
Subject: [PATCH] RIL patch

Change-Id: I146b460ec1a1f356791f994eb32489c136598834
---
 src/java/com/android/internal/telephony/RIL.java | 43 +++++++++++++-----------
 1 file changed, 24 insertions(+), 19 deletions(-)

diff --git a/src/java/com/android/internal/telephony/RIL.java b/src/java/com/android/internal/telephony/RIL.java
index aaf72d8..a886458 100644
--- a/src/java/com/android/internal/telephony/RIL.java
+++ b/src/java/com/android/internal/telephony/RIL.java
@@ -99,11 +99,11 @@ class RILRequest {
     //***** Class Variables
     static Random sRandom = new Random();
     static AtomicInteger sNextSerial = new AtomicInteger(0);
-    private static Object sPoolSync = new Object();
-    private static RILRequest sPool = null;
-    private static int sPoolSize = 0;
-    private static final int MAX_POOL_SIZE = 4;
-    private Context mContext;
+    protected static Object sPoolSync = new Object();
+    protected static RILRequest sPool = null;
+    protected static int sPoolSize = 0;
+    protected static final int MAX_POOL_SIZE = 4;
+    protected Context mContext;
 
     //***** Instance Variables
     int mSerial;
@@ -180,7 +180,7 @@ class RILRequest {
         }
     }
 
-    private RILRequest() {
+    protected RILRequest() {
     }
 
     static void
@@ -254,7 +254,7 @@ public final class RIL extends BaseCommands implements CommandsInterface {
      * Wake lock timeout should be longer than the longest timeout in
      * the vendor ril.
      */
-    private static final int DEFAULT_WAKE_LOCK_TIMEOUT_MS = 60000;
+    protected static final int DEFAULT_WAKE_LOCK_TIMEOUT_MS = 60000;
 
     // Wake lock default timeout associated with ack
     private static final int DEFAULT_ACK_WAKE_LOCK_TIMEOUT_MS = 200;
@@ -326,11 +326,11 @@ public final class RIL extends BaseCommands implements CommandsInterface {
 
     // The number of the required config values for broadcast SMS stored in the C struct
     // RIL_CDMA_BroadcastServiceInfo
-    private static final int CDMA_BSI_NO_OF_INTS_STRUCT = 3;
+    protected static final int CDMA_BSI_NO_OF_INTS_STRUCT = 3;
 
-    private static final int CDMA_BROADCAST_SMS_NO_OF_SERVICE_CATEGORIES = 31;
+    protected static final int CDMA_BROADCAST_SMS_NO_OF_SERVICE_CATEGORIES = 31;
 
-    private final DisplayManager.DisplayListener mDisplayListener =
+    protected final DisplayManager.DisplayListener mDisplayListener =
             new DisplayManager.DisplayListener() {
         @Override
         public void onDisplayAdded(int displayId) { }
@@ -350,7 +350,7 @@ public final class RIL extends BaseCommands implements CommandsInterface {
         }
     };
 
-    private final BroadcastReceiver mBatteryStateListener = new BroadcastReceiver() {
+    protected final BroadcastReceiver mBatteryStateListener = new BroadcastReceiver() {
         @Override
         public void onReceive(Context context, Intent intent) {
             boolean oldState = mIsDevicePlugged;
@@ -565,7 +565,7 @@ public final class RIL extends BaseCommands implements CommandsInterface {
      * @return Length of message less header, or -1 on end of stream.
      * @throws IOException
      */
-    private static int readRilMessage(InputStream is, byte[] buffer)
+    protected static int readRilMessage(InputStream is, byte[] buffer)
             throws IOException {
         int countRead;
         int offset;
@@ -1429,7 +1429,7 @@ public final class RIL extends BaseCommands implements CommandsInterface {
         send(rr);
     }
 
-    private void
+    protected void
     constructGsmSendSmsRilRequest (RILRequest rr, String smscPDU, String pdu) {
         rr.mParcel.writeInt(2);
         rr.mParcel.writeString(smscPDU);
@@ -1467,7 +1467,7 @@ public final class RIL extends BaseCommands implements CommandsInterface {
         send(rr);
     }
 
-    private void
+    protected void
     constructCdmaSendSmsRilRequest(RILRequest rr, byte[] pdu) {
         int address_nbr_of_digits;
         int subaddr_nbr_of_digits;
@@ -1720,7 +1720,7 @@ public final class RIL extends BaseCommands implements CommandsInterface {
      *  Translates EF_SMS status bits to a status value compatible with
      *  SMS AT commands.  See TS 27.005 3.1.
      */
-    private int translateStatus(int status) {
+    protected int translateStatus(int status) {
         switch(status & 0x7) {
             case SmsManager.STATUS_ON_ICC_READ:
                 return 1;
@@ -2497,7 +2497,7 @@ public final class RIL extends BaseCommands implements CommandsInterface {
      * Update the screen state. Send screen state ON if the default display is ON or the device
      * is plugged.
      */
-    private void updateScreenState() {
+    protected void updateScreenState() {
         final int oldState = mRadioScreenState;
         mRadioScreenState = (mDefaultDisplayState == Display.STATE_ON || mIsDevicePlugged)
                 ? RADIO_SCREEN_ON : RADIO_SCREEN_OFF;
@@ -2532,8 +2532,9 @@ public final class RIL extends BaseCommands implements CommandsInterface {
     private RadioState getRadioStateFromInt(int stateInt) {
         RadioState state;
 
+	int stateIntNormalized = convertRadioState(stateInt);
         /* RIL_RadioState ril.h */
-        switch(stateInt) {
+        switch(stateIntNormalized) {
             case 0: state = RadioState.RADIO_OFF; break;
             case 1: state = RadioState.RADIO_UNAVAILABLE; break;
             case 10: state = RadioState.RADIO_ON; break;
@@ -2545,6 +2546,10 @@ public final class RIL extends BaseCommands implements CommandsInterface {
         return state;
     }
 
+    protected int convertRadioState(int paramInt) {
+	return paramInt > 1 && paramInt < 10 ? 10 : paramInt;
+    }
+
     private void switchToRadioState(RadioState newState) {
         setRadioState(newState);
     }
@@ -2596,7 +2601,7 @@ public final class RIL extends BaseCommands implements CommandsInterface {
         }
     }
 
-    private void
+    protected void
     decrementWakeLock(RILRequest rr) {
         synchronized(rr) {
             switch(rr.mWakeLockType) {
@@ -2622,7 +2627,7 @@ public final class RIL extends BaseCommands implements CommandsInterface {
         }
     }
 
-    private boolean
+    protected boolean
     clearWakeLock(int wakeLockType) {
         if (wakeLockType == FOR_WAKELOCK) {
             synchronized (mWakeLock) {
-- 
1.9.1

